name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: temis_backend
  ECS_SERVICE: temis-backend-service
  ECS_CLUSTER: temis-backend-cluster
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: temis_backend
  DEBUG: True
  ALLOWED_HOSTS: 0.0.0.0
  SECRET_KEY: change-secret-key
  DB_ENGINE: django.db.backends.sqlite3
  DB_NAME: devdatabase
  TIME_ZONE: America/La_Paz
  LANGUAGE_CODE: en-EN
  EMAIL_HOST: smtp.mailtrap.io
  EMAIL_HOST_USER: your_user
  EMAIL_HOST_PASSWORD: your_password
  EMAIL_PORT: 25
  EMAIL_USE_TLS: True
  DEFAULT_FROM_EMAIL: mensajeria@demo.org
  PORT: 8001

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        PORT: 8001
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
